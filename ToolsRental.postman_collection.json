{
	"info": {
		"_postman_id": "115c7f59-7136-45eb-aa73-2bd5b82307ee",
		"name": "ToolsRental",
		"description": "Validations:\n\n- Response time\n    \n- Response status code\n    \n- Response body string contains\n    \n- Response body fields check like includes something, exist or exactly correct\n    \n\nSet global varibles and access it.\n\nused filter() in array.\n\nused query parameters and value get from variables.\n\ncheck response is object (data type)\n\n**Authorization**:\n\ngive \" name and email\"==>give access token.\n\nSelect \"Bearer token\" in authorication tab and pase access token.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "37423792"
	},
	"item": [
		{
			"name": "Welcome",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Welcome\");\r",
							"});\r",
							"pm.test(\"response field varification\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Welcome to the Simple Tool Rental API.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://simple-tool-rental-api.glitch.me"
			},
			"response": []
		},
		{
			"name": "StatusCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Status is up\", ()=> {\r",
							"    const res = pm.response.json();\r",
							"    console.log(res.status)\r",
							"    //console.log(res[\"status\"])\r",
							"    pm.expect(res.status).to.eql(\"UP\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/status"
			},
			"response": []
		},
		{
			"name": "getAllTools",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const res = pm.response.json();\r",
							"pm.globals.set(\"toolId\",res[0].id) // for now we use first response\r",
							"\r",
							"\r",
							"//filter in programming to get elecrtive available tool to order\r",
							"const tools = res.filter((tool) => tool.category === \"electric-generators\" && tool.inStock === true)\r",
							"const tool = tools[0];\r",
							"pm.globals.set(\"dummytoolId\",tool.id)\r",
							"\r",
							"\r",
							"//assertions to check object found\r",
							"pm.test(\"Tool object found check\", function(){\r",
							"    pm.expect(tool).to.be.an('object');\r",
							"    pm.expect(tool.inStock).to.eql(true);\r",
							"    pm.expect(tool.inStock).to.be.true;\r",
							"    pm.expect(tool.category).to.eql(\"electric-generators\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/tools",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tools"
					],
					"query": [
						{
							"key": "category",
							"value": "ladders",
							"disabled": true
						},
						{
							"key": "results",
							"value": "3",
							"disabled": true
						},
						{
							"key": "available",
							"value": "true",
							"disabled": true
						},
						{
							"key": "category",
							"value": "trailers",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getSingleTool",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"pm.test(\"tool id check\", () =>{\r",
							"    pm.expect(res.id).to.eql(pm.globals.get(\"dummytoolId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Checking current stock is more than zero\", function () {\r",
							"     pm.expect(res).to.be.an('object');\r",
							"     pm.expect(res['current-stock']).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/tools/:toolsId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tools",
						":toolsId"
					],
					"variable": [
						{
							"key": "toolsId",
							"value": "{{dummytoolId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"const res = pm.response.json();\r",
							"pm.collectionVariables.set(\"accToken\",res.accessToken);\r",
							"console.log(res.accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postman\",\r\n   \"clientEmail\": \"valentin{{$randomInt}}@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api-clients"
			},
			"response": []
		},
		{
			"name": "Create Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"console.log(res.orderId);\r",
							"pm.globals.set(\"orderId\", res.orderId);\r",
							"\r",
							"\r",
							"//just get unavilable tools from get all tools request (using availble = flase) and use to order it, we will get \"can't oder out of stock\" response\r",
							"\r",
							"\r",
							"pm.test(\"Check order created with orderId\", function () {\r",
							"     const response = pm.response.json();\r",
							"    pm.expect(response.created).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the properties 'created' and 'orderId'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property('created');\r",
							"    pm.expect(response).to.have.property('orderId');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"toolId\": {{dummytoolId}},\r\n \"customerName\": \"Maddy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/orders"
			},
			"response": []
		},
		{
			"name": "getAllOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/orders"
			},
			"response": []
		},
		{
			"name": "getSingleOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n \"customerName\": \"RobbieRobbie\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getSingleOrderToCheckUpdateOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"toolId\": 5499,\r\n \"customerName\": \"Robbie\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteOrderAPIconfirm",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error msg displayed if we try to delete\",()=>{\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.have.property(\"error\")\r",
							"    pm.expect(res.error).to.include(\"No order\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-tool-rental-api.glitch.me",
			"type": "string"
		},
		{
			"key": "accToken",
			"value": "Your acc token",
			"type": "string"
		}
	]
}